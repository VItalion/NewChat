//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfConsole.ChatService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatService.IChatService", CallbackContract=typeof(WpfConsole.ChatService.IChatServiceCallback))]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SignUp", ReplyAction="http://tempuri.org/IChatService/SignUpResponse")]
        bool SignUp(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SignUp", ReplyAction="http://tempuri.org/IChatService/SignUpResponse")]
        System.Threading.Tasks.Task<bool> SignUpAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SignIn", ReplyAction="http://tempuri.org/IChatService/SignInResponse")]
        bool SignIn(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SignIn", ReplyAction="http://tempuri.org/IChatService/SignInResponse")]
        System.Threading.Tasks.Task<bool> SignInAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/SendMessage")]
        void SendMessage(string sender, string recipient, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string sender, string recipient, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/LogOut", ReplyAction="http://tempuri.org/IChatService/LogOutResponse")]
        void LogOut(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/LogOut", ReplyAction="http://tempuri.org/IChatService/LogOutResponse")]
        System.Threading.Tasks.Task LogOutAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/CreateRoom", ReplyAction="http://tempuri.org/IChatService/CreateRoomResponse")]
        bool CreateRoom(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/CreateRoom", ReplyAction="http://tempuri.org/IChatService/CreateRoomResponse")]
        System.Threading.Tasks.Task<bool> CreateRoomAsync(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Inside", ReplyAction="http://tempuri.org/IChatService/InsideResponse")]
        bool Inside(string roomName, string roomPwd, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Inside", ReplyAction="http://tempuri.org/IChatService/InsideResponse")]
        System.Threading.Tasks.Task<bool> InsideAsync(string roomName, string roomPwd, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Leave", ReplyAction="http://tempuri.org/IChatService/LeaveResponse")]
        void Leave(string roomName, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Leave", ReplyAction="http://tempuri.org/IChatService/LeaveResponse")]
        System.Threading.Tasks.Task LeaveAsync(string roomName, string userLogin);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/NewMessage")]
        void NewMessage(string sender, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : WpfConsole.ChatService.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.DuplexClientBase<WpfConsole.ChatService.IChatService>, WpfConsole.ChatService.IChatService {
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool SignUp(string login, string password) {
            return base.Channel.SignUp(login, password);
        }
        
        public System.Threading.Tasks.Task<bool> SignUpAsync(string login, string password) {
            return base.Channel.SignUpAsync(login, password);
        }
        
        public bool SignIn(string login, string password) {
            return base.Channel.SignIn(login, password);
        }
        
        public System.Threading.Tasks.Task<bool> SignInAsync(string login, string password) {
            return base.Channel.SignInAsync(login, password);
        }
        
        public void SendMessage(string sender, string recipient, string message) {
            base.Channel.SendMessage(sender, recipient, message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string sender, string recipient, string message) {
            return base.Channel.SendMessageAsync(sender, recipient, message);
        }
        
        public void LogOut(string login, string password) {
            base.Channel.LogOut(login, password);
        }
        
        public System.Threading.Tasks.Task LogOutAsync(string login, string password) {
            return base.Channel.LogOutAsync(login, password);
        }
        
        public bool CreateRoom(string name, string password) {
            return base.Channel.CreateRoom(name, password);
        }
        
        public System.Threading.Tasks.Task<bool> CreateRoomAsync(string name, string password) {
            return base.Channel.CreateRoomAsync(name, password);
        }
        
        public bool Inside(string roomName, string roomPwd, string userLogin) {
            return base.Channel.Inside(roomName, roomPwd, userLogin);
        }
        
        public System.Threading.Tasks.Task<bool> InsideAsync(string roomName, string roomPwd, string userLogin) {
            return base.Channel.InsideAsync(roomName, roomPwd, userLogin);
        }
        
        public void Leave(string roomName, string userLogin) {
            base.Channel.Leave(roomName, userLogin);
        }
        
        public System.Threading.Tasks.Task LeaveAsync(string roomName, string userLogin) {
            return base.Channel.LeaveAsync(roomName, userLogin);
        }
    }
}
